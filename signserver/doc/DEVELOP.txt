DEVELOP
------

This file contains instructions needed for building and developing
SignServer.


Checking out from Subversion      
----------------------------

After checking out from	SVN you	need to	run any of the Ant targets for the
workspace to recognize if it is	the Community or Enterprise Edition:
$ bin/ant init

This will copy some files into the right location as well as creating the
res/edition.properties file to flag that this has been done.

After checking out the project there will be errors in the IDE because some 
source files (i.e. Web Services stubs) has not been generated yet. Those errors 
will disappear after configuring and building SignServer.


Building
--------

Maven is used for building the sources.

Note 1:
Before Maven version 3.2.3, plugins and artifacts were fetched from the Central 
Repository over insecure HTTP. Make sure to edit your ~/.m2/settings.xml to
override the URL of the Central. See doc/sample-maven-settings.xml for an
example.

Note 2:
Some of our dependencies (and Maven plugins) are not yet in Central but are
available in PrimeKey's internal repository as well as under lib/ext.
To have this dependencies installed there is a script to run:
$ ./modules/maven-manually-install-deps.sh

To build using Maven from the command line use for instance:
$ mvn install

This will build all of the SignServer modules, putting the artifacts under
./lib/ and the SignServer/DeployTools module descriptors in ./mods-available.


Gather dependencies for later offline build
-------------------------------------------

Install our dependencies:
$ ./modules/maven-manually-install-deps.sh -Dmaven.repo.local=/tmp/signserver-repo/

Let Maven gather all of the remaining dependencies:
$ mvn -Dmaven.repo.local=/tmp/signserver-repo/ dependency:go-offline install -DskipTests=true

Later building completely offline, for example:
$ mvn -Dmaven.repo.local=/tmp/signserver-repo/ -o install


NetBeans IDE
------------

Open the Maven projects directly in the IDE.

The latest NetBeans IDE (currently 8.1) is recommended with one exception:
The SignServer AdminGUI uses the Swing Application Framework and requires 
NetBeans IDE =7.0.x for changing some of the GUI parts.

Tips:
- Define the top-level project "SignServer" as the main project open in the IDE
  by right-clicking on it and choose "Set as Main Project".
  This way hitting F6 will be the same as running ant deploy.
  The downside of this is that F11 now maps to "Build Main project" and if I
  only work on a small number of modules I don't want to rebuild everything
  all the time so I redefine the shortcut to be "Build project" and only the
  selected project (or the project belonging to the current open file) is built
  when hitting F11. Then the few times I want to build everything I simply
  select the Main Project first.

Note: When deploying from within the IDE, currently you need to have the
environment variable APPSRV_HOME specified so the script knows where to deploy
to. DSS-1231 was created to eventually be able to specify this within the IDE.


Eclipse
-------
Each SignServer subproject is an Maven project. Open or import it to Eclipse
as done for any Maven project.
TODO: This is currently untested.


Writing Documentation
---------------------
The SignServer documentation is built by maven-site-plugin using Doxia from 
XDOC 2.0 (XML) source files under modules/SignServer-Doc and are then placed
in ./doc/htdocs as well as included in the SignServer-Doc-web.war.


Automated Tests
---------------
SignServer uses JUnit for automated testing. Test cases exists in multiple 
projects. 

Unit tests are run when building with Maven unless -DskipTests is specifed.
System tests are placed in JAR files and can later be run with Ant:
$ bin/ant systemtest:jars

This is roughly how tests are currently organized:
* Each new module can include its own Unit tests.
* Some components (i.e. web services) uses their own test projects 
  (SignServer-Test-*WS) to not have to include client-side code in their 
  projects.
* Legacy tests and system tests are placed in SignServer-Test-System.

See also the "Testing" chapter of the manual for the prerequisites and 
instructions for how to run the tests. 


Test coverage with Clover
-------------------------
TODO: Is this still working in trunk (4.0)? 
Should we consider some other test coverage tool at server (CI) side?

To run Clover, copy the Clover installation folder (or make a symlink to it) 
and store it as lib/ext/clover-dir. If the project has been built already an 
dummy Clover folder will already exist with that name so you will have to 
remove it first.

$ bin/ant clean clover.clean build deploy
$ bin/ant ant test:run

Stop the application server and then run the following to gather the report:
$ ant clover.xml clover.html

To disable Clover even if it is installed run Ant with -Dno.clover=true.


Admin GUI Development
---------------------
The SignServer AdminGUI is implemented using the Swing Application Framework 
(JSR 296) and requires NetBeans IDE 7.0 if you want to do GUI changes. Since 
JSR 296 didn't make it into the JDK, support for it was dropped in later 
versions of the IDE.


Code Conventions
----------------

We are loosely trying to follow the old Sun/Oracle Code Conventions for the 
Java TM Programming Language:
http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html

Some of the rules:
- The code should be properly indented
- We use spaces (not tabs) for indention, the IDE:s can be configured to use this
- Opening curly braces ("{") should not be on there own line. Example "if (true) {"
- First sentence in JavaDoc ends with a period ".". Example /** The signature algorithm. */
- TODO: Add more here
