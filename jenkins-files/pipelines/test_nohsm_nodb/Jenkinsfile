node('dss-docker-slave') {

   checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[cancelProcessOnExternalsFail: true, credentialsId: 'e8aa0eb0-9eb8-42d2-8596-6a7a90c8f7cc', depthOption: 'infinity', ignoreExternalsOption: true, local: '.', remote: 'https://svn.cesecore.eu/svn/signserver-restricted/trunk']], quietOperation: true, workspaceUpdater: [$class: 'UpdateUpdater']])

   def testImage
   def SIGNSERVER_HOME= 'UNKNOWN'
   def PWD = pwd();
    
    stage('Prepare Container') {
        sh 'hostname'
        sh 'pwd'
        sh 'cp -rv /home/jenkins/binaries `pwd`/jenkins-files/containers/jboss-base-jdk-8-eap7/'
    }

    stage('Build Container') {
        dockerfile {
            label 'dss-docker'
            dir "jenkins-files/containers/${env.CONTAINER}"
            filename 'Dockerfile'
            additionalBuildArgs  '--disable-content-trust=true --pull' // TODO: We want to find out how to run with content trust enabled for Red Hat images
            args '--group-add root --volume m2-repo:/m2-repo'
        }
        
        sh 'hostname'
        sh 'ls'
        testImage = docker.build("my-image2:${env.BUILD_ID}", "jenkins-files/containers/jboss-base-jdk-8-eap7/")
        
    }

    testImage.inside {

        stage('Unpack') {
            sh 'rm -rf signserver-ee-*'
            //copyArtifacts filter: 'signserver-ee-*-bin.zip', fingerprintArtifacts: true, projectName: 'EE_trunk_Build_centos-7-openjdk-8-jdk_Unit', selector: lastSuccessful()
            copyArtifacts filter: 'signserver-ee-*-bin.zip', fingerprintArtifacts: true, projectName: "${env.UPSTREAM_BUILD_JOB}", selector: lastSuccessful()

            sh 'ls'
            sh 'unzip signserver-ee*.zip'
            sh 'rm signserver-ee*.zip'         
        }

        stage('Configure App Server') {
            sh 'cp -v jenkins-files/pipelines/test_nohsm_nodb/standalone.xml /opt/jboss/jboss-eap-7.0/standalone/configuration/standalone.xml'

            sh 'mkdir /opt/jboss/jboss-eap-7.0/standalone/configuration/keystore/'
            sh 'cp -v jenkins-files/pipelines/test_nohsm_nodb/keystore.jks /opt/jboss/jboss-eap-7.0/standalone/configuration/keystore/'
            sh 'cp -v jenkins-files/pipelines/test_nohsm_nodb/truststore.jks /opt/jboss/jboss-eap-7.0/standalone/configuration/keystore/'
            sh 'mkdir /tmp/data'
        }

        stage('Configure SignServer') {
            sh '''
                cd signserver-ee* && echo "
                    j2ee.web-nohttps=true
                    database.name=nodb
                    database.nodb.location=/tmp/data
                    database.username=NOT-USED
                    healthcheck.maintenancefile=${SIGNSERVER_HOME}/maintenance.properties
                    web.admingui.dist.enabled=true
                    web.clientcli.dist.enabled=true" > conf/signserver_deploy.properties
            '''
            sh '''
                cd signserver-ee* && echo "
# Set root logger level to DEBUG for debug output.
log4j.rootLogger=DEBUG, A1

# A1 is set to be a ConsoleAppender. 
log4j.appender.A1=org.apache.log4j.ConsoleAppender

# A1 uses PatternLayout.
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%d{ISO8601} %-5p [%c{1}] %m%n

# Limit categories related to the Database CLI
log4j.category.org.hibernate=WARN, A1
log4j.category.org.cesecore.keys.token.CryptoTokenFactory=WARN, A1
log4j.category.org.cesecore.keys.util.KeyTools=WARN, A1

# Limit categories related to JBoss AS 7/EAP6 remote EJB
#log4j.category.org.jboss.remoting=ERROR, A1
#log4j.category.org.jboss.ejb.client=ERROR, A1
#log4j.category.org.xnio=ERROR, A1" > conf/log4j.properties
            '''
sh 'cd signserver-ee* && mkdir p12'
sh 'cd signserver-ee* && ls -ltr'
sh 'cd ${PWD}/jenkins-files/pipelines/test_nohsm_nodb &&  ls -ltr'
// sh 'cp -v jenkins-files/pipelines/test_nohsm_nodb/keystore.jks signserver-ee*/p12/tomcat.jks'
// def SIGNSERVER_HOME= ${env.WORKSPACE}/signserver-ee*
// sh 'cd signserver-ee* && cp -v ${PWD}/jenkins-files/pipelines/test_nohsm_nodb/keystore.jks p12/tomcat.jks'
sh 'cd signserver-ee* &&  cp -v ${PWD}/jenkins-files/pipelines/test_nohsm_nodb/truststore.jks p12/'


        }

        stage('Deploy SignServer') {
            sh 'cd signserver-ee* && ant -q deploy-ear'

            archiveArtifacts 'signserver-ee*/tmp/signserver.ear'
        }

        stage('Run') {
            sh 'hostname'
            sh 'ls'
            sh 'id'
            sh '$USER'   

            sh 'chmod +x jenkins-files/pipelines/test_nohsm_nodb/run.sh'
            sh 'jenkins-files/pipelines/test_nohsm_nodb/run.sh'

            //dir ('') {
            //    
            //}
        }
        stage('System Test') {            
                        // run system tests                                     
                        // sh 'cd signserver-ee* && bin/ant systemtest:jars -Dno.clover=true'

                        // gather the results
                         junit "signserver-ee*/tmp/test/results/TEST-*.xml"                                  
        }
    }

    //post {
    //    always {
    //        cleanWs()
    //    }
    //}
    
}
